<?php
/**
 * Mangages all operation with database.
 * @see CDebug
 * 
 * @author Morreale Luca
 */
class CDatabase extends CDebug{
    
    /**
     * Connection with database.
     */
    private $connection;
    /**
     * Host towards estabilish a connection.
     */
    private $host;
    /**
     * User to use in the connection.
     */
    private $user;
    /**
     * Password for the user given.
     */
    private $psw;
    /**
     * Database to use.
     */
    private $db;
    
    /**
     * Resource of last query performed.
     */
    private $result;
    
    /**
     * Allows to delete a table or the entire DB.
     */
    private $allow_delete=false;
    
    /**
     * Last query performed.
     */
    private $last_query;
    
    /**
     * Number of row, valid only for SELECT.
     */
    private $rows;
    
    /**
     * Number of row, valid for INSERT, UPDATE o DELETE.
     */
    private $affected;
    
    /**
     * Last record fetched by result.
     */
    private $array;
    
        
    /**
     * Initialize the parameters for the connection and connect.
     * @param $database         database to use
     * @param $host             host
     * @param $user             user 
     * @param $password         password of the user
     * @param $persistant       bool, flag for persistant connection
     * @param $delete           bool to set the delete flag
     * @param $debug            bool to activate the debug mode
     */
    public function __construct($database, $host='localhost', $user='anonymous', $password='', $persistant=false, $delete=false, $debug=false){
        $this->setDebug($debug);
        $this->host=$host;
        $this->user=$user;
        $this->psw=$password;
        $this->db=$database;
        $this->allow_delete = $delete;
        
        $this->connect($persistant);
        
        $this->debug(__FUNCTION__, array('db'=>$database, 'host'=>$host, 'user'=>$user, 'pswd'=>$password, 'persistant'=>$persistant, 'delete'=>$delete));    
    }
    /**
     * Close the connection with the database.
     */
    public function __deconstruct(){
                    
        $this->closeConnection();
        $this->debug(__FUNCTION__,null);
    }
        
    /**
     * Connect to the database using the previously given paramenters.
     * @param $persistant   bool, flag for persistant connection
     * @return bool
     */
    public function connect($persistant){
        
        $this->closeConnection();
        
        if($persistant){
            $this->connection = mysqli_pconnect($this->host, $this->user, $this->psw);
        }else{
            $this->connection = mysqli_connect($this->host, $this->user, $this->psw);
        }
        
        if(!$this->connection){
            $this->debug(__FUNCTION__, 'Couldn\'t connect to server');
            return false;
        }
        
        $this->debug(__FUNCTION__, $persistant);
        return $this->useDb();
    }
    
    /**
     * Select the database.
     * @return bool
     */
    private function useDb(){ 
        $this->debug(__FUNCTION__, null);

        if(!mysqli_select_db($this->connection,$this->db)){
            $this->debug(__FUNCTION__, 'Couldn\'t select to database');
            return false;
        }
        
        return true;
    }
    
    /**
     * Close the connection to the database.
     */
    public function closeConnection(){
        if(isset($this->connection)){
            mysqli_close($this->connection);
        }
        $this->debug(__FUNCTION__, $this->connection);   
    }
    
    /**
     * Verifies if is connected to the host.
     * @return bool
     */
    public function isConnected(){
        $this->debug(__FUNCTION__, null);
        
        if ($this->connection) {
            return true;
        } else {
            return false;
        }
    }
            
    /**
     * Executes a query and save the result if it is successful.
     * @param $query_string     string of the query to execute
     * @param $securized         bool that mean if the query was securize from sql injection
     * @return bool
     * 
     */
    public function query($query_string,$securized=false){
        $this->debug(__FUNCTION__,array($query_string,$securized));

        if (!$securized) {
            $this->last_query = $this->securizeData($query_string);
        } else {
            $this->last_query = $query_string;
        }

        if ($this->isDeleteQuery($this->last_query) && !$this->allow_delete) {
            return false;
        }

        mysqli_free_result($this->result);
        
        $this->result = mysqli_query($this->connection, $this->last_query) or $this->debug(__FUNCTION__, "Error during the execution of the query");
        
        if ($this->result) {
            $this->rows = mysqli_num_rows($this->result);
            $this->affected = mysqli_affected_rows($this->connection);
        } else {
            return false;
        }

        return true;
    }

    /**
     * Performs a SELECT query.
     * @param $table                string to identify the single table to use
     * @param $condition            string or array for 'WHERE' condition
     * @param $field                string or array to identify what field select
     * @param $after_where          string could contain condition after 'WHERE' like 'GROUP BY' or 'ORDER BY'
     * @param $befor_where          string could contain condition after 'WHERE' like 'INNER JOIN'
     * @param $special_condition    string to include special comparing like '>' or 'LIKE' or 'BETWEEN'
     * @return bool 
     * 
     */
    public function query_select($table, $condition=false, $field=false, $after_where=false){
        if(empty($table)){
            return false;
        }
        
        if($field && $field != '*'){
            $q .= 'SELECT ' . $this->buildString($field,',',false, false, false);
        } else {
            $q .= 'SELECT * ';
        }
        
        $q .= 'FROM ' . $table . ' ';
        if ($condition || $after_where) {
            $q .= 'WHERE ';
        }

        if($condition){
            $q .= $this->buildString($condition,"AND",true) . ' ';
        }
        
        if($after_where){
            $q .= $this->securizeData($after_where) . ' ';
        }
        
        $this->debug(__FUNCTION__,array($table, $condition, $field, $after_where));
        return $this->query($q, true);
    }

    /**
     * Performs an INSERT query.
     * @param $table    string, table where execute the insert  
     * @param $set      array or string, fields to set
     * @return bool 
     */
    public function query_insert($table, $set){
        if (empty($table) || empty($set)) {
            return false;
        }

        $q = 'INSERT INTO ' . $table . ' SET ';
        
        $q .= $this->buildString($set,',',true,false);
        
        $this->debug(__FUNCTION__,array('table'=>$table, 'set'=>$set));           
        return $this->query($q,true);
    }

    /**
     * Performs an UPDATE query.
     * @param $table        string, table where execute the update  
     * @param $set          array or string, fields to set
     * @param $condition    array or string, fields of WHERE clausole
     * @return bool
     */
    public function query_update($table, $set, $condition=false){
        if (empty($table) || empty($set)) {
            return false;
        }

        $q = 'UPDATE ' . $table . ' SET ';
        
        $q .= $this->buildString($set,',',true,false);
        
        if($condition){
            $q .= " WHERE " . $this->buildString($condition,'AND',true);
        }
        
        $this->debug(__FUNCTION__,array('table'=>$table, 'set'=>$set, 'condition'=>$condition));
        return $this->query($q,true);
        
    }

    /**
     * Performs an DELETE query.
     * @param $table        string, table where execute the delete
     * @param $condition    array or string, fields of WHERE clausole
     * @param $limit        int, how many delete execute if more than one recors is found
     * @return bool
     */
    public function query_delete($table,$condition=false,$limit=false){
        if (empty($table)) {
            return false;
        }

        $q = 'DELETE FROM ' . $table . ' ';
        
        if($condition){
            $q .= 'WHERE ' . $this->buildString($condition,'AND',true);
        }
        
        if($limit){
            $q .= 'LIMIT '. $limit;
        }
        
        $this->debug(__FUNCTION__,array('table'=>$table,'condition'=>$condition,'limit'=>$limit));
        return $this->query($q,true);
    }

    /** 
     * Generates a string using the give parameters for the WHERE's clausoles or SELECT's field, etc..
     * @param $array        array or string containg the fields on which works
     * @param $sep          string used to separate two element
     * @param $use_key      flag used to notify if must be added the key from the array {@array}
     * @param $like         flag used to notify in case of a string {@value} to use 'LIKE' operator
     * @param $quotes       flag used to notify to use quotes (won't used quotes if the key is not added)
     * @return string
     * 
     * Example:
     *      buildString(array('id'=>5), false, true);
     * will generate:
     *      id = '5'
     * or like this: 
     *      buildString(array('id'=>5), ',', true);
     * will generate:
     *      id = '5' ,
     * or like this: 
     *      buildString(array('id'=>5), ',');
     * will generate:
     *       5 ,
     */
    private function buildString($array, $sep=false, $use_key=false, $like=true, $quotes=true){
        
        $string = '';
        $securized = $this->securizeData($array);
        
        if(is_array($securized)){
            
            foreach($securized as $key => $value){
                $string .= $this->buildElement($key, $value, $use_key, $like, $quotes, $sep) . ' ';
            }
            $string = substr($string,0,-strlen($sep)-1);
            
        } elseif(is_string($array)){
            $string = $array;
        }
        
        $this->debug(__FUNCTION__,array('args'=>$array, 'separator'=>$sep, 'add_key'=>$use_key, 'like'=>$like, 'quotes'=>$quotes));
        return $string;
    }
    
    /**
     * Generates a string to be insert in a query for the specified value
     * @param mixed  $key         the key string of the {@value}
     * @param mixed  $value       string or number used in the query
     * @param bool   $use_key          flag used to notify if must be added the key from the array {@value}
     * @param bool   $like             flag used to notify in case of a string {@value} to use 'LIKE' operator
     * @param bool   $quotes           flag used to notify to use quotes
     * @param string $sep              string used to separate two element
     * @return string
     */
    private function buildElement($key, $value, $use_key, $like, $quotes, $sep){
        $element = "";
        if($use_key){
            $element = $key;

            if(is_string($value) && $like){
                $element .= ' LIKE ';
            } else {
                $element .= '=';
            }

            if($quotes){
                $element .= "'$value'";
            } else {
                $element .= $value;
            }

        } else {
            $element .= $value;
        }
        $element .= $sep;
        
        $this->debug(__FUNCTION__, $element);
        return $element;
    }

    /**
     * Prevents the sql injection.
     * @param $args      string or array, data to use in a query
     * @return mixed
     */
    private function securizeData($args){
        $data = array();
        if(is_array($args)){
            foreach($args as $key=>$value){
                $data = array_merge($data, $this->securizeElement($key, $value));
            }
        } elseif(!is_int($args)) {
            $data = mysqli_real_escape_string($this->connection, $args);
        } else {
            $data = $args;
        }
        
        $this->debug(__FUNCTION__,array('securized'=>$data, 'args'=>$args));
        return $data;
    }
    
    /**
     * Securize a pair of value, {@key} and {@value}, and return it as an array
     * @param mixed $key        key of the {@value} to securize
     * @param mixed $value      value of the element
     * @return array
     */
    private function securizeElement($key, $value){
        $data = array();
        if(!is_int($key)){
            $key = mysqli_real_escape_string($this->connection,$key);
        }
        if(is_array($value)){
            $data[$key] = $this->securizeData($value);
        } elseif(!is_int($value)) {
            $data[$key] = mysqli_real_escape_string($this->connection, $value);
        } else {
            $data[$key] = $value;
        }
        return $data;
    }

    /**
     * Fetchs the next record of last query performed.
     * @return      bool
     */ 
    public function hasNextRecord(){
        $this->debug(__FUNCTION__,$this->result);

        if (!isset($this->result)) {
            return false;
        }

        $this->array = mysqli_fetch_assoc($this->result);
        if ($this->array) {
            return true;
        }
        return false;
    }

    /**
     * Returns last record successful fetched.
     * @return array
     */
    public function getRecord(){
        $this->debug(__FUNCTION__,$this->array);

        return $this->array;                
    }

    /**
     * Returns the value of the specified field.
     * @param $field    string containing the name of field
     * @return mixed
     */
    public function getField($field){
        $this->debug(__FUNCTION__,array('field' => $field, 'array' => $this->array));

        if (isset($this->array[$field])) {
            return $this->array[$field];
        }
        return null;
        
    }

    /**
     * Fetchs the next record of last query performed and returns it.
     * @return array
     * @see fetchNextRecord
     * @see getRecordArray
     */
    public function getNextRecord(){
        $this->debug(__FUNCTION__,$this->result);

        if ($this->hasNextRecord()) {
            return $this->getRecord();
        }
        return null;
    }

    /**
     * Returns how much rows has the result of the last query executed,
     * both if is a SELECT or an other type of operation like INSERT, UPDATE o DELETE.
     * @return int
     */
    public function num(){
        $this->debug(__FUNCTION__,null);
        if($this->rows > 0){
            return $this->rows;
        } else { 
            return $this->affected;
        }
    }

    /**
     * Counts the rows of a table, with a condition if given.
     * @param $table        string, table where perform the count
     * @param $condition    string or array, condition of the fields to count
     * @return int
     */
    public function countRows($table, $condition=false){
        $this->debug(__FUNCTION__,array('table'=>$table, 'condition'=>$condition));
        
        $exec = $this->query_select($table,$condition,'count(*)');
        if (!$exec) {
            return false;
        }
        $this->hasNextRecord();
        return $this->getField("count(*)");
        
    }

    /**
     * Verifies if the given query is a 'DELETE' query.
     * @return bool
     */
    public function isDeleteQuery($query){
        $this->debug(__FUNCTION__,$query);

        $q = strtolower($query);
        if (strpos($q, 'delete') < 10 && strpos($q, 'delete') !== false) {
            return true;
        }
        return false;
    }

    /**
     * Verifies if the given query is a 'INSERT' query.
     * @return bool
     */
    public function isInsertQuery($query){
        $this->debug(__FUNCTION__,$query);

        $q = strtolower($query);
        if (strpos($q, 'insert') < 10 && strpos($q, 'insert') !== false) {
            return true;
        }
        return false;
    }

    /**
     * Verifies if the given query is a 'UPDATE' query.
     * @return bool
     */
    public function isUpdateQuery($query){
        $this->debug(__FUNCTION__,$query);

        $q = strtolower($query);
        if (strpos($q, 'update') < 10 && strpos($q, 'update') !== false) {
            return true;
        }
        return false;
    }

    /**
     * Verifies if the given query is a 'SELECT' query.
     * @return bool
     */
    public function isSelectQuery($query){
        $this->debug(__FUNCTION__,$query);

        $q = strtolower($query);
        if (strpos($q, 'select') < 10 && strpos($q, 'select') !== false) {
            return true;
        }
        return false;
    }
    
    /**
     * Returns the last query executed.
     * @return string
     */
    public function getLastQuery(){
        $this->debug(__FUNCTION__,null);
        return $this->last_query;
    }
    
    /**
     * Allows to delete record from a table.
     * @param $bool     boolean, value to indicate the permission
     */
    public function allowDelete($bool){
        $this->allow_delete = $bool;
        $this->debug(__FUNCTION__,$bool);
    }

    /**
     * Returns last insert ID.
     * @return int 
     */
    public function getLastInsertID(){
        $this->debug(__FUNCTION__,null);
        return mysqli_insert_id($this->connection);
    }

    /**
     * Returns number of field has last query executed.
     * @return int
     */
    public function numFields() {
        $this->debug(__FUNCTION__,null);
        return mysqli_field_count($this->result);
    }
    
    /**
     * Returns an array representing the schema of the table
     * @param $table    table name
     * @return array
     */
    public function getSchemaTable($table){
        $this->query("SHOW COLUMNS FROM $table");
        $i = 0;
        $return = array();
        while ($info = $this->getNextRecord) {
            foreach ($info as $key => $value) {
                $return[$i][$key] = $value;
            }
            $i++;
        }
        
        $this->debug(__FUNCTION__,null);
        return $return;
    }

    /**
     * Returns all tables' name in the database
     * @return array
     */
    public function getTableList() {
        $this->query("SHOW TABLES");
        $i = 0;
        $return = array();
        while ($info = $this->getNextRecord) {
            $return[$i]["table"] = $info[0];
            $return[$i]["tablespace_name"] = $this->Database;
            $return[$i]["database"] = $this->Database;
            $i++;
        }
        
        $this->debug(__FUNCTION__,null);
        return $return;
    }

    /**
     * Locks  table.
     * @param $table    string, table to lock
     * @param $mode     string, mode to lock
     * @return bool
     */
    public function lock($table, $mode = "write") {
        $this->debug(__FUNCTION__,array($table, $mode));

        if (!$this->connection) {
            $this->connect();
        }

        $res = mysqli_query("lock tables $table $mode", $this->connection);
        if (!$res){
            $this->debug(__FUNCTION__, "lock($table, $mode) failed.");
            return false;
        }
        return true;
    }
    
    /**
     * Unlocks all tables.
     * @return bool
     */
    public function unlock() {
        $this->debug(__FUNCTION__,null);

        if (!$this->connection) {
            $this->connect();
        }

        $res = mysqli_query("unlock tables");
        if (!$res){
            $this->debug(__FUNCTION__, "unlock() failed.");
            return false;
        }
        return true;
    }
     
}

?>
