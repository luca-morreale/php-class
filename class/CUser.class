<?php
/**
 * Contains all the information needed during the session.
 * @see CDatabase
 * @see CDebug
 * 
 * @author Luca Morreale
 */
class CUser extends CDebug{
    
    /**
     * Array linked to $_SESSION array of server.
     */
    private $session;

    /**
     * Name of the user.
     */
    private $name;

    /**
     * User's nick.
     */
    private $user;

    /**
     * Level of information user can have access.
     */
    private $level = 0;

    /**
     * Token for this session, it will be NULL if the user is not logged.
     */
    private $token;

    /**
     * Id of the user.
     */
    private $id;

    /**
     * Database manager.
     */
    private $db;

    /**
     * Initializes all components of the class
     */
    public function __construct($debug=false){
        $this->setDebug($debug);
        
        $this->db = new CDatabase(CONSTANT::database, CONSTANT::host, CONSTANT::user, CONSTANT::password);
        $this->analyzeSession();
        
        $this->debug(__FUNCTION__, null);
    }

    /**
     * Analyze the parameters of the session.
     */
    private function analyzeSession(){
        if (session_status() == PHP_SESSION_NONE) {
            session_start();
        }
        global $_SESSION;
        $this->session = $_SESSION;

        if (isset($this->session['token'])) {
            $this->name = $this->session['name'];
            $this->user = $this->session['user'];
            $this->level = $this->session['level'];
            $this->token = $this->session['token'];
            $this->id = $this->session['id'];
        } else {
            $this->token = null;
        }


        $this->debug(__FUNCTION__, $this->session);
    }

    /**
     * Tries to login with the given credentials, return a bool indicating the result of the operation.
     * @return bool
     */
    public function login($user, $pswd, $token){
        $this->debug(__FUNCTION__, array($user, $pswd, $token));


        $this->db->query_select("user", array("user"=>$user));
        $this->db->hasNextRecord();

        if($this->db->getField('password') == crypt($pswd,'$6$rounds'.CONSTANT::rounds.'$'.CONSTANT::salt.'$')){

            $this->session['token'] =   $token;
            $this->session['id'] =      $this->db->getField('id');
            $this->session['level'] =   $this->db->getField('level');
            $this->session['user'] =    $user;
            $this->session['name'] =    $this->db->getField('name').$this->db->getField('surname');

            foreach ($this->session as $key => $value) {
                $this->$key = $value;
            }

            global $_SESSION;
            $_SESSION = $this->session;

            $this->db->query_update('user', array('last_login'=>date("Y-m-d H:i:s")), array('id' => $this->id));

            return true;
        }
        
        return false;
    }

    /**
     * Deletes all information of the user and returns a bool indicating the final status of the operation.
     * @return bool
     */
    public function logout(){
        
        try{
            session_destroy();
            unset($this->session);
            unset($this->token);
            unset($this->id);
            unset($this->level);
            unset($this->user);
            unset($this->name);
        }catch(Exception $e){
            $this->debug(__FUNCTION__, $e->getMessage());
            return false;
        }

        $this->debug(__FUNCTION__, $this->session);
        return true;
    }

    /**
     * Returns a bool indicating the status of the user.
     * @return bool
     */
    public function isLogged(){
        $this->debug(__FUNCTION__, $this->token);

        if (isset($this->token)) {
            return true;
        }
        return false;
    }

    /**
     *  Verifies if the user has the permission needed.
     * @return bool
     */
    public function hasPermission($level){
        $this->debug(__FUNCTION__, $this->level);

        if ($this->level >= $level) {
            return true;
        }
        return false;
    }

    /**
     * Verfies if the user is allowed to see the given page.
     * @return bool
     */
    public function isAllowed($page){
        $this->debug(__FUNCTION__, $page);
        
        $this->db->query_select('page',array('label' => $page));
        $page_info = $this->db->getNextRecord();
        
        if($this->db->num() == 0){
            return false;
        } elseif($this->level >= $page_info['level']) {
            return true;
        }
        return false;
    }

    /**
     * Returns the accesible user's data.
     * @return array
     */
    public function getUserData(){
        if ($this->isLogged()) {
            return array('id' => $this->id, 'name' => $this->$this->name, 'level' => $this->level);
        }
        return null;

    }

    public function findUser($id){
        $this->debug(__FUNCTION__, $id);

        $this->db->query_select('user', array('id'=>$id));
        if ($this->db->hasNextRecord()) {
            return $this->db->getField('name') . $this->db->getField('surname');
        }
        return false;
    }
}

?>
