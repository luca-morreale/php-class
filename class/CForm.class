<?php
/**
 * Generates a fully personalizable form.
 * @see CDatabase
 * @see CHtml
 * @see CDebug
 * @see CONSTANT
 * 
 * @author Morreale Luca
 */
class CForm extends CDebug{
    
    /**
     * Database manager.
     */
    private $db;

    public function __construct($debug=false){

        $this->setDebug($debug);
        $this->db = new CDatabase(CONSTANT::database,CONSTANT::host,CONSTANT::user,CONSTANT::password);
        
        echo CHtml::cssFile('form');
        echo CHtml::cssFile('autocomplete');
        echo CHtml::script('',array('src' => 'http://ajax.googleapis.com/ajax/libs/jquery/1.8.3/jquery.min.js'));
        echo CHtml::script('',array('src' => 'http://ajax.googleapis.com/ajax/libs/jqueryui/1.8/jquery-ui.min.js'));
        echo CHtml::scriptFile('jquery.autocomplete.min.js');
        
        $this->debug(__FUNCTION__, null);
    }

    /**
     * Start the form.
     * @param $name      name of the form.
     * @param $action    url to request, as default is the same page the form was created.
     * @param $method    method to send data, as default is POST.
     */
    public function beginForm($name,$action='', $method='post'){
        if(empty($action))
            $action = $_SERVER['REQUEST_URI'];
        echo CHtml::beginForm($action, $method, array('role'=>'form', 'accept-charset'=>'UTF-8', 'name'=>'form_'.$name));
        $this->debug(__FUNCTION__,array('name'=>$name,'action'=>$action, 'method'=>$method));
    }
    
    /**
     * Close the form.
     */
    public function endForm(){
        echo CHtml::endForm();
        $this->debug(__FUNCTION__,null);
    }

    /**
     * Generete the opening tag for the fieldset.
     */
    public function beginFieldset(){
        echo CHtml::openTag('fieldset');
        $this->debug(__FUNCTION__,null);
    }
    
    /**
     * Generete the closing tag for the fieldset.
     */
    public function endFieldset(){
        echo CHtml::closeTag('fieldset');
        $this->debug(__FUNCTION__,null);
    }
    
    /**
     * Generete the legend's tag.
     * @param $name    name of the fieldset.
     */
    public function insertLegend($name){
        echo CHtml::tag('legend',array(),$name);
        $this->debug(__FUNCTION__ ,$name);
    }

    /**
     * Inserts an input field with label
     * @param $type        type of the input field.
     * @param $name        name of the input field. (If you have to perform some search on db it has to have the same name of the field in the table)
     * @param $label       label for this item.
     * @param $option      html option like class or id for this field.
     */
    public function addField($type, $name, $label,$option=array()){
        if($type != 'hidden')
            echo CHtml::label($label.': ',$name);

        $option = $this->addBootstrap($option,$type);
        echo CHtml::inputField($type, $name, '', $option);

        $this->debug(__FUNCTION__ ,array('type'=>$type, 'name'=>$name, 'option'=>$option));
    }
    
    /**
     * Generates a multiple choice field.
     * @param $type        type of the input field.
     * @param $name        name of the input field. (If you have to perform some search on db it has to have the same name of the field in the table)
     * @param $label       label for this item.
     * @param $values      array containing the text and the respect value for each input.
     * @param $option      html option like class or id for this field.
     */
    public function addMultipleChioice($type, $name, $label, $values, $option=array()){
        echo CHtml::label($label.': ',$name);
        
        foreach($values as $value => $text)
            echo CHtml::inputField($type,$name,$value,$option).$text;   
        
        $this->debug(__FUNCTION__ ,array('type'=>$type, 'name'=>$name, 'option'=>$option));
    }

    /**
     * Generates a Text Area.
     * @param $name     name of the textarea
     * @param $label       label for this item.
     * @param $option   array, parameter to set in the textarea
     * @param $text     text to set inside the textarea
     */
    public function insertArea($name, $label, $option=array(),$text=''){
        echo CHtml::label($label.': ',$name);
        $option['name']=$name;
        $option = $this->addBootstrap($option,'textarea');
        echo CHtml::tag('textarea',$option,$text);

        $this->debug(__FUNCTION__, array($option,$text));
    }

    /**
     * Render an autocomplete field.
     * @param string $name      name of the input field.
     * @param $label       label for this item.
     * @param mixed $data       information to extract data. Must be selected from the database only two field
     *                                                  one for the value field (with alias 'id') and the text (with alias as 'value')
     * @param array $option     option for the input field. 
     */
    public function addAutocompleteField($name, $label, $data, $option=array()){
        
        static $n = 0;
        
        $option['id'] = 'autocomplete_'.$n;
        $option['class'] = isset($option['class']) ? $option['class']." autocomplete" : "autocomplete";
        $this->addField('text', $name."_autocomplete-textfield",$label, $option);
        $this->addField("hidden" ,$name, '',array('id' => 'autocomplete_hidden_'.$n, 'class' => 'autocomplete'));
        

        if(isset($data['file'])){                      
            echo CHtml::script($data['script']);
        } else {
            $query = $this->normalizeQuery($data['query']);
            $this->db->query_select($query['table'],$query['where'], $query['field'], $query['after_where']);
            $json = $this->generateJson();
            
            $script = 'var data'.$n.' = '.$json.'
                        $("#autocomplete_'.$n.'").autocomplete({
                            lookup: data'.$n.',
                            onSelect: function(suggestion){
                                $("#autocomplete_hidden_'.$n.'").val(suggestion.id);
                            }
                        });';
            echo CHtml::script($script);

        }
        $n++;
        $this->debug(__FUNCTION__, array($name,$data,$option));
    }
    
    /**
     * Generates a Json file containing the info for the autocomplete field.
     * @return string
     */
    private function generateJson(){
        $a_json = array();
        $a_json_row = array();
        while($this->db->hasNextRecord()){
            $a_json_row["id"] = $this->db->getField("id");
            $a_json_row["value"] = $this->db->getField("value");
            array_push($a_json, $a_json_row);
        }

        $this->debug(__FUNCTION__, $a_json);
        return json_encode($a_json);
    }

    /**
     * Generates a dropdown list by a list
     * @param $name        name of the combo list
     * @param $label       label for this item.
     * @param $data        array containing the data to create the list; Must be selected from the database only two field
     *                                                  one for the value field (with alias 'id') and the text (with alias as 'label')
     * @param $option      array containing the style information.
     */
    public function insertComboList($name, $label, $data,$option=array()){
        
        echo CHtml::label($label.': ',$name);
        
        $selected = isset($option["default"]) ? $option["default"] : 0;
        unset($option["default"]);
        
        $option['name']=$name;
        echo CHtml::openTag('select',$option);
        $this->renderOptionSet($data,$selected);  
        echo CHtml::closeTag('select')."\n";

        $this->debug(__FUNCTION__ ,array('name'=>$name,'data'=>$data, 'style'=>$option));
    }

    /**
     * Generate an option group.
     * @param $name        name for this input field.
     * @param $label       label for this item.
     * @param $data        array containing the data for this input field.
     * @param $option      style option.
     */
    public function insertOptionGroup($name, $label, $data,$option=array()){
        
        echo CHtml::label($label.': ', $name)."\n";

        $selected = isset($option["default"]) ? $option["default"] : 0;
        unset($option["default"]);
        
        $option['name']=$name;
        echo CHtml::openTag('select',$option);
        
        foreach($data as $opt => $group){
            
            echo CHtml::openTag('optgroup',array('label'=>$opt))."\n";
            $selected -= $this->renderOptionSet($group, $selected);
            echo CHtml::closeTag('optgroup')."\n";
        }
        
        echo CHtml::closeTag('select');
        $this->debug(__FUNCTION__,array($data,$option));
    }

    /**
     * Generate a DataList.
     * @param $name         name of the field.
     * @param $label        label of the input.
     * @param $data         array, list of data or a query to perform. The query must select two fields:
     *                                  the string to show must has alias 'label'; the value to send must has alias 'id'.
     * @param $option   array, parameters for the style. It must contains the key 'id'.
     */
    public function insertDataList($name, $label, $data,$option=array()){
                
        echo CHtml::label($label.': ', $name)."\n";
        
        $option['list'] = $name;
        echo CHtml::tag('input',$option);
        
        $option['id'] = $name;
        echo CHtml::openTag('datalist',$option);
        
        $this->renderOptionSet($data);
        
        echo CHtml::closeTag('datalist');
        
        $this->debug(__FUNCTION__, array('name'=>$name,'data'=>$data,'option'=>$option));
        
    }

    /**
     * Extracts values from database or array to render the option set.
     * @param $data        array with the needed information
     * @param $selected    item to selected
     * @return int  
     */
    protected function renderOptionSet($data, $selected=0){
        
        $count = 0;
        if(isset($data['query'])){
            
            if(is_array($data['query'])){
                $query = $this->normalizeQuery($data['query']);
                $this->db->query_select($query['table'],$query['where'],$query['field'],$query['after_where']);
            } else {
                $this->db->query($data['query']);
            }

            while($this->db->hasNextRecord()){
                foreach($this->db->getRecord() as $key => $value)
                    $$key = $value;
                $html['value'] = $id;
                if($count == $selected){
                    $html["selected"] = 1;
                }
                echo CHtml::tag('option',array('value'=>$id),$label)."\n";
                $count++;
            }

        } else {
            var_dump($data);
            foreach($data as $id => $label){
                $html['value'] = $id;
                if($count == $selected){
                    $html["selected"] = 1;
                }
                echo CHtml::tag('option',$html,$label)."\n";
                $count++;
            }
            
        }

        $this->debug(__FUNCTION__, array('data'=>$data , 'selected'=>$selected));
        return $count;
    }

    /**
     * Extract the information needed to perform a query from the array
     * @param $args    array containing information
     * @return array
     */
    private function normalizeQuery($args){
        $array['table'] = $args['table'];
        $array['field'] = $args['field'];
        if(!isset($args['where']))
            $array['where'] = array();
        else
            $array['where'] = $args['where'];
        if(!isset($args['after_where']))
            $array['after_where'] = array();
        else
            $array['after_where'] = $args['after_where'];

        $this->debug(__FUNCTION__, array('start'=>$args,'result'=>$array));
        return $array;
    }

    /**
     * Add class to get css from bootstrap files.
     * @param array $opt        html option
     * @param string $type      type of input field
     * @return array
     */
    protected function addBootstrap($opt,$type){
        if($type != "submit"){
            if(isset($opt['class'])){
                $opt['class'] .= " form-control";
            } else {
                $opt['class'] = "form-control";
            }
        } else {
            if(isset($opt['class'])){
                $opt['class'] .= " btn btn-lg btn-primary btn-block";
            } else {
                $opt['class'] = "btn btn-lg btn-primary btn-block";
            }
        }
        $this->debug(__FUNCTION__, array($opt,$type));
        return $opt;
    }

    /**
     * Generate an unique id for the session.
     */
    public function generateToken(){
        return md5( uniqid('auth', true) );
    }
}
?>
